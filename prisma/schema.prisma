// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workout {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  entries Entry[]
  user    User    @relation(fields: [userId], references: [id])
  userId  String

  @@index([userId])
}

model Exercise {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  currentWeight   Float?
  targetWeight    Float?
  currentDistance Float?
  targetDistance  Float?

  entries Entry[]
  user    User    @relation(fields: [userId], references: [id])
  userId  String

  @@index([userId])
}

model Entry {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  notes      String?
  workoutId  String?
  exerciseId String

  sets     Set[]
  workout  Workout? @relation(fields: [workoutId], references: [id])
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@index([exerciseId, workoutId])
}

model Set {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  reps      Float?
  weight    Float?
  distance  Float?
  elevation Float?

  entry   Entry  @relation(fields: [entryId], references: [id])
  entryId String

  @@index([entryId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  exercises Exercise[]
  workouts  Workout[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
